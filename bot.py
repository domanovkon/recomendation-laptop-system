import numpy as np
import telebot
import pymorphy2
import pandas as pd
from token_api import TOKEN_API
from telebot import types, util
from smiles import sml

bot = telebot.TeleBot(TOKEN_API)


@bot.message_handler(commands=['start'])
def command_help(message):
    photo = open('svidetel.png', 'rb')
    bot.send_photo(message.from_user.id, photo)
    keyboard = types.InlineKeyboardMarkup()
    key_list = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ', callback_data="lap_list")
    keyboard.add(key_list)
    key_filt = types.InlineKeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ—É—Ç–±—É–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', callback_data="lap_filter")
    keyboard.add(key_filt)
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç üëãüëãüëã \n –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å ü§î", reply_markup=keyboard)


dataSetSearch123 = pd.read_csv('laptops.txt', delimiter='\t', encoding="utf-16-le",
                               usecols=['–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã', '–¶–µ–Ω–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–û–ó–£', '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
                                        '–ù–æ—É—Ç–±—É–∫'])

laptopTree = [["–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è", "–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è"],
              ["–í—ã—Å–æ–∫–∞—è", "–ù–∏–∑–∫–∞—è"],
              ["–ù–æ—É—Ç–±—É–∫–∏", "–£–ª—å—Ç—Ä–∞–±—É–∫–∏", "–ì–µ–π–º–µ—Ä—Å–∫–∏–µ"],
              [4, 8, 16, 32],
              ["AMD", "Intel"]]

weights = [0.4, 0.3, 0.2, 0.3, 0.1]


def diff_tree(t1, t2):
    difftree = []
    for i in range(0, 5):
        difftree.append(abs(laptopTree[i].index(t1[i]) - laptopTree[i].index(t2[i])))
    similarity = 0
    for i in range(len(difftree)):
        similarity += difftree[i] * weights[i]
    return similarity


def searchSimulariry():
    dfSearch = pd.DataFrame({'–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã': [gpu_type.title()],
                             '–¶–µ–Ω–∞': [prices_category.title()],
                             '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': [laptop_type.title()],
                             '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–û–ó–£': ram_amount,
                             '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä': cpu_type})

    func = diff_tree
    dataset = dataSetSearch123
    return (getSimilarsInSearch(dataset, dataSetSearch123, func, dfSearch).sort_values("–í–µ–ª–∏—á–∏–Ω–∞ —Ä–∞–∑–ª–∏—á–∏—è"))


def getSimilarsInSearch(ds, dataSet, metric, dfSearch):
    r = []
    for i in range(len(ds.values.tolist())):
        r.append(metric(dfSearch.values.tolist()[0], ds.values.tolist()[i]))

    return pd.DataFrame(list(zip(r, map(lambda e: str("   ".join(e[-1:])),
                                        dataSet.values.tolist()))), index=np.arange(len(r)),
                        columns=['–í–µ–ª–∏—á–∏–Ω–∞ —Ä–∞–∑–ª–∏—á–∏—è', '–ù–æ—É—Ç'])


def get_likes(message):
    print(message.text)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global gpu_type
    global prices_category
    global laptop_type
    global ram_amount
    global cpu_type
    if call.data == "lap_list":
        dataSetSearch = pd.read_csv('laptops.txt', delimiter='\t', encoding="utf-16-le",
                                    usecols=['–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã', '–¶–µ–Ω–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–û–ó–£', '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
                                             '–ù–æ—É—Ç–±—É–∫'])
        columns_titles = ["–ù–æ—É—Ç–±—É–∫", '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–û–ó–£', "–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", '–¶–µ–Ω–∞']
        dataSetSearch = dataSetSearch.reindex(columns=columns_titles)

        laptop_list_counter = 0
        for x in dataSetSearch.values.tolist():
            laptop_list_counter = laptop_list_counter + 1
            str1 = x[0] + "\n" + "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + x[1] + "\n" + "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: " + x[2] + "\n" + \
                   "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –û–ó–£: " + str(x[3]) + "\n" + "–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: " + x[4] + "\n" + "–¶–µ–Ω–∞: " + x[5]
            bot.send_message(call.message.chat.id, sml[laptop_list_counter] + " " + str1 + " üòé")
        keyboard = types.InlineKeyboardMarkup()
        key_list = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ', callback_data="lap_list")
        keyboard.add(key_list)
        key_filt = types.InlineKeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ—É—Ç–±—É–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', callback_data="lap_filter")
        keyboard.add(key_filt)
        key_like = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ', callback_data="lap_like")
        keyboard.add(key_like)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µü§î", reply_markup=keyboard)
    elif call.data == "lap_like":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –Ω–æ—É—Ç–±—É–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª üëçüèª")
        bot.register_next_step_handler(call.message, get_likes)
    elif call.data == "lap_filter" or call.data == "filt_no":
        keyboard = types.InlineKeyboardMarkup()
        gpu_disk_k = types.InlineKeyboardButton(text='–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è', callback_data="disk")
        keyboard.add(gpu_disk_k)
        gpu_inside_k = types.InlineKeyboardButton(text='–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è', callback_data="inside")
        keyboard.add(gpu_inside_k)
        if call.data == "lap_filter":
            bot.send_message(call.message.chat.id, '–ü–æ–¥–±–æ—Ä –Ω–æ—É—Ç–±—É–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º ü§ì')
        elif call.data == "filt_no":
            bot.send_message(call.message.chat.id, '–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ ü§ì')
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã üåà', reply_markup=keyboard)
    elif call.data == "disk":
        gpu_type = "–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è"
        keyboard = types.InlineKeyboardMarkup()
        price_h = types.InlineKeyboardButton(text='–í—ã—Å–æ–∫–∞—è', callback_data="high")
        keyboard.add(price_h)
        price_l = types.InlineKeyboardButton(text='–ù–∏–∑–∫–∞—è', callback_data="low")
        keyboard.add(price_l)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é üí≤', reply_markup=keyboard)
    elif call.data == "inside":
        gpu_type = "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è"
        keyboard = types.InlineKeyboardMarkup()
        price_h = types.InlineKeyboardButton(text='–í—ã—Å–æ–∫–∞—è', callback_data="high")
        keyboard.add(price_h)
        price_l = types.InlineKeyboardButton(text='–ù–∏–∑–∫–∞—è', callback_data="low")
        keyboard.add(price_l)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é üí≤', reply_markup=keyboard)
    elif call.data == "high":
        prices_category = "–í—ã—Å–æ–∫–∞—è"
        keyboard = types.InlineKeyboardMarkup()
        lap = types.InlineKeyboardButton(text='–ù–æ—É—Ç–±—É–∫–∏', callback_data="lap")
        keyboard.add(lap)
        ult = types.InlineKeyboardButton(text='–£–ª—å—Ç—Ä–∞–±—É–∫–∏', callback_data="ult")
        keyboard.add(ult)
        game = types.InlineKeyboardButton(text='–ì–µ–π–º–µ—Ä—Å–∫–∏–µ', callback_data="game")
        keyboard.add(game)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ—É—Ç–±—É–∫–∞ üôÉ', reply_markup=keyboard)
    elif call.data == "low":
        prices_category = "–ù–∏–∑–∫–∞—è"
        keyboard = types.InlineKeyboardMarkup()
        lap = types.InlineKeyboardButton(text='–ù–æ—É—Ç–±—É–∫–∏', callback_data="lap")
        keyboard.add(lap)
        ult = types.InlineKeyboardButton(text='–£–ª—å—Ç—Ä–∞–±—É–∫–∏', callback_data="ult")
        keyboard.add(ult)
        game = types.InlineKeyboardButton(text='–ì–µ–π–º–µ—Ä—Å–∫–∏–µ –Ω–æ—É—Ç–±—É–∫–∏', callback_data="game")
        keyboard.add(game)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ—É—Ç–±—É–∫–∞ üôÉ', reply_markup=keyboard)
    elif call.data == "lap":
        laptop_type = "–ù–æ—É—Ç–±—É–∫–∏"
        keyboard = types.InlineKeyboardMarkup()
        ram4 = types.InlineKeyboardButton(text='4', callback_data="ram4")
        keyboard.add(ram4)
        ram8 = types.InlineKeyboardButton(text='8', callback_data="ram8")
        keyboard.add(ram8)
        ram16 = types.InlineKeyboardButton(text='16', callback_data="ram16")
        keyboard.add(ram16)
        ram32 = types.InlineKeyboardButton(text='32', callback_data="ram32")
        keyboard.add(ram32)
        bot.send_message(call.message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–∏–≤—ã –Ω—É–∂–Ω–æ ‚õ∞', reply_markup=keyboard)
    elif call.data == "ult":
        laptop_type = "–£–ª—å—Ç—Ä–∞–±—É–∫–∏"
        keyboard = types.InlineKeyboardMarkup()
        ram4 = types.InlineKeyboardButton(text='4', callback_data="ram4")
        keyboard.add(ram4)
        ram8 = types.InlineKeyboardButton(text='8', callback_data="ram8")
        keyboard.add(ram8)
        ram16 = types.InlineKeyboardButton(text='16', callback_data="ram16")
        keyboard.add(ram16)
        ram32 = types.InlineKeyboardButton(text='32', callback_data="ram32")
        keyboard.add(ram32)
        bot.send_message(call.message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–∏–≤—ã –Ω—É–∂–Ω–æ ‚õ∞', reply_markup=keyboard)
    elif call.data == "game":
        laptop_type = "–ì–µ–π–º–µ—Ä—Å–∫–∏–µ"
        keyboard = types.InlineKeyboardMarkup()
        ram4 = types.InlineKeyboardButton(text='4', callback_data="ram4")
        keyboard.add(ram4)
        ram8 = types.InlineKeyboardButton(text='8', callback_data="ram8")
        keyboard.add(ram8)
        ram16 = types.InlineKeyboardButton(text='16', callback_data="ram16")
        keyboard.add(ram16)
        ram32 = types.InlineKeyboardButton(text='32', callback_data="ram32")
        keyboard.add(ram32)
        bot.send_message(call.message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–∏–≤—ã –Ω—É–∂–Ω–æ ‚õ∞', reply_markup=keyboard)
    elif call.data == "ram4":
        ram_amount = 4
        keyboard = types.InlineKeyboardMarkup()
        amd = types.InlineKeyboardButton(text='AMD', callback_data="amd")
        keyboard.add(amd)
        intel = types.InlineKeyboardButton(text='Intel', callback_data="intel")
        keyboard.add(intel)
        bot.send_message(call.message.chat.id, '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ üî®', reply_markup=keyboard)
    elif call.data == "ram8":
        ram_amount = 8
        keyboard = types.InlineKeyboardMarkup()
        amd = types.InlineKeyboardButton(text='AMD', callback_data="amd")
        keyboard.add(amd)
        intel = types.InlineKeyboardButton(text='Intel', callback_data="intel")
        keyboard.add(intel)
        bot.send_message(call.message.chat.id, '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ üî®', reply_markup=keyboard)
    elif call.data == "ram16":
        ram_amount = 16
        keyboard = types.InlineKeyboardMarkup()
        amd = types.InlineKeyboardButton(text='AMD', callback_data="amd")
        keyboard.add(amd)
        intel = types.InlineKeyboardButton(text='Intel', callback_data="intel")
        keyboard.add(intel)
        bot.send_message(call.message.chat.id, '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ üî®', reply_markup=keyboard)
    elif call.data == "ram32":
        ram_amount = 32
        keyboard = types.InlineKeyboardMarkup()
        amd = types.InlineKeyboardButton(text='AMD', callback_data="amd")
        keyboard.add(amd)
        intel = types.InlineKeyboardButton(text='Intel', callback_data="intel")
        keyboard.add(intel)
        bot.send_message(call.message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Ç üî®', reply_markup=keyboard)
    elif call.data == "amd":
        cpu_type = "AMD"
        keyboard = types.InlineKeyboardMarkup()
        yes = types.InlineKeyboardButton(text='–î–∞', callback_data="filt_yes")
        keyboard.add(yes)
        no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data="filt_no")
        keyboard.add(no)
        bot.send_message(call.message.chat.id,
                         '–í—ã –≤—ã–±—Ä–∞–ª–∏:\n–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã üåà ' + gpu_type + '\n–¶–µ–Ω–∞ üí≤ ' + prices_category
                         + '\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è üôÉ ' + laptop_type + '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–∏–≤—ã ‚õ∞ ' + str(
                             ram_amount) + '\n–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä üî® '
                         + cpu_type + '\n–í—Å–µ –≤–µ—Ä–Ω–æ ‚ùì', reply_markup=keyboard)
    elif call.data == "intel":
        cpu_type = "Intel"
        keyboard = types.InlineKeyboardMarkup()
        yes = types.InlineKeyboardButton(text='–î–∞', callback_data="filt_yes")
        keyboard.add(yes)
        no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data="filt_no")
        keyboard.add(no)
        bot.send_message(call.message.chat.id,
                         '–í—ã –≤—ã–±—Ä–∞–ª–∏:\n–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã üåà ' + gpu_type + '\n–¶–µ–Ω–∞ üí≤ ' + prices_category
                         + '\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è üôÉ ' + laptop_type + '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–∏–≤—ã ‚õ∞ ' + str(
                             ram_amount) + '\n–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä üî® '
                         + cpu_type + '\n–í—Å–µ –≤–µ—Ä–Ω–æ ‚ùì', reply_markup=keyboard)
    elif call.data == "filt_yes":
        dataSetSearch = pd.read_csv('laptops.txt', delimiter='\t', encoding="utf-16-le",
                                    usecols=['–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã', '–¶–µ–Ω–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–û–ó–£', '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
                                             '–ù–æ—É—Ç–±—É–∫'])
        gpu_search = dataSetSearch[dataSetSearch["–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"] == gpu_type.title()]
        prices_search = gpu_search[gpu_search["–¶–µ–Ω–∞"] == prices_category.title()]
        laptop_type_search = prices_search[prices_search["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == laptop_type.title()]
        ram_amounts_search = laptop_type_search[laptop_type_search["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–û–ó–£"] == ram_amount]
        cpu_search = ram_amounts_search[ram_amounts_search["–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä"] == cpu_type]
        if cpu_search.empty:
            bot.send_message(call.message.chat.id,
                             "–í –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Ç –Ω–æ—É—Ç–±—É–∫–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ üò•\n–í–æ–∑–º–æ–∂–Ω–æ –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ø–æ—Ö–æ–∂–∏–µ")
            lap_array = searchSimulariry().values.tolist()
            laptop_list_counter = 0
            for x in lap_array:
                if laptop_list_counter == 5:
                    break
                laptop_list_counter = laptop_list_counter + 1
                str1 = x[1] + '\n'
                bot.send_message(call.message.chat.id, sml[laptop_list_counter] + " " + str1)
            keyboard = types.InlineKeyboardMarkup()
            key_list = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ',
                                                  callback_data="lap_list")
            keyboard.add(key_list)
            key_filt = types.InlineKeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ—É—Ç–±—É–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', callback_data="lap_filter")
            keyboard.add(key_filt)
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µü§î", reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
            columns_titles = ["–ù–æ—É—Ç–±—É–∫", '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–û–ó–£', "–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", '–¶–µ–Ω–∞']
            dataSetSearch = cpu_search.reindex(columns=columns_titles)

            laptop_list_counter = 0
            for x in dataSetSearch.values.tolist():
                laptop_list_counter = laptop_list_counter + 1
                str1 = x[0] + "\n" + "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + x[1] + "\n" + "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: " + x[2] + "\n" + \
                       "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –û–ó–£: " + str(x[3]) + "\n" + "–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: " + x[4] + "\n" + "–¶–µ–Ω–∞: " + x[5]
                bot.send_message(call.message.chat.id, sml[laptop_list_counter] + " " + str1 + " üòé")
            keyboard = types.InlineKeyboardMarkup()
            key_list = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ',
                                                  callback_data="lap_list")
            keyboard.add(key_list)
            key_filt = types.InlineKeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ—É—Ç–±—É–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', callback_data="lap_filter")
            keyboard.add(key_filt)
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µü§î", reply_markup=keyboard)


@bot.message_handler(func=lambda message: True)
def message_handler(message):
    keyboard = types.InlineKeyboardMarkup()
    key_list = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ', callback_data="lap_list")
    keyboard.add(key_list)
    key_filt = types.InlineKeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ—É—Ç–±—É–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', callback_data="lap_filter")
    keyboard.add(key_filt)
    bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å ‚ùì", reply_markup=keyboard)


bot.polling()
